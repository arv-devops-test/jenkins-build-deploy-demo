import groovy.json.JsonSlurper

node {
    
    echo "Workspace=${WORKSPACE}"
    echo "User="
    ExecuteShellCommand("whoami", false)
    def dockerRepoServerName = "arvindockerregistry.azurecr.io"
    def mavenImageName = "${dockerRepoServerName}/maven:3.5.3-jdk-7"
    def dockerImageName
    def dockerImageNameLatest
    def projectName ="java-helloworld"


    stage('Pre-build Cleanup') {
        CleanWorkspace()
    }

    // stage('Get-Git-Repo') {
    //     git url: 'https://github.com/arv-devops-test/hello-world-war.git'
    // }

    stage('create-build-container')  {
        //run maven container and execture the below steps
        withCredentials([usernamePassword(credentialsId: 'DockerPrivateRegistryId', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {

            ExecuteShellCommand("docker login -u ${USERNAME} -p ${PASSWORD} ${dockerRepoServerName}", true)
            docker.image(mavenImageName).inside {
               
                git url: 'https://github.com/arv-devops-test/hello-world-war.git'
                sh 'ls -al'
            }
            //docker.image(mavenImageName).withRun('-e "MYSQL_ROOT_PASSWORD=my-secret-pw" -p 3306:3306') { c ->
            //}
        }
        
        // compile app using maven
        // publish war file to artifactory

    }

    stage('Post-build Cleanup') {
        
        CleanWorkspace()
    }
    

}



def CleanWorkspace()
{
    ws_content = sh (
                    script: "ls",
                    returnStdout: true
                    ).trim()
        echo ws_content
        
        if(ws_content != "")
        {
            echo "Workspace has content:"
            echo "Cleaning workspace..."
            sh 'rm -r $WORKSPACE/* 2>/dev/null';
        }
}

def ExecuteShellCommand(cmd, failOnError) {
   def errorHandling = ""
   if(!failOnError)
   {
       errorHandling = "Ignoring Exit Code as specified"
   }
   try
   {
        exitCode = sh (script: cmd,
                      returnStatus: true)
        
        echo "Finished task with Exit Code: ${exitCode.toString()}  :: ${errorHandling}"
        if(exitCode != 0 && failOnError)
        {
            error("An error occured while executing this: ${cmd}")
        }
   }
   
   catch(ex)
   {
        if(failOnError)
        {
            error("An error occured while executing this: ${cmd}")
        }
   }
   
}
